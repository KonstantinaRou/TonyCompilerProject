/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.node;

import java.util.*;
import tony.analysis.*;

public final class AIfStatement extends PStatement
{
    private PExpression _expression_;
    private final LinkedList _ifstate_ = new TypedLinkedList(new Ifstate_Cast());
    private final LinkedList _elseif_ = new TypedLinkedList(new Elseif_Cast());
    private PStatement _else_;

    public AIfStatement()
    {
    }

    public AIfStatement(
        PExpression _expression_,
        List _ifstate_,
        List _elseif_,
        PStatement _else_)
    {
        setExpression(_expression_);

        {
            this._ifstate_.clear();
            this._ifstate_.addAll(_ifstate_);
        }

        {
            this._elseif_.clear();
            this._elseif_.addAll(_elseif_);
        }

        setElse(_else_);

    }
    public Object clone()
    {
        return new AIfStatement(
            (PExpression) cloneNode(_expression_),
            cloneList(_ifstate_),
            cloneList(_elseif_),
            (PStatement) cloneNode(_else_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfStatement(this);
    }

    public PExpression getExpression()
    {
        return _expression_;
    }

    public void setExpression(PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public LinkedList getIfstate()
    {
        return _ifstate_;
    }

    public void setIfstate(List list)
    {
        _ifstate_.clear();
        _ifstate_.addAll(list);
    }

    public LinkedList getElseif()
    {
        return _elseif_;
    }

    public void setElseif(List list)
    {
        _elseif_.clear();
        _elseif_.addAll(list);
    }

    public PStatement getElse()
    {
        return _else_;
    }

    public void setElse(PStatement node)
    {
        if(_else_ != null)
        {
            _else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _else_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_expression_)
            + toString(_ifstate_)
            + toString(_elseif_)
            + toString(_else_);
    }

    void removeChild(Node child)
    {
        if(_expression_ == child)
        {
            _expression_ = null;
            return;
        }

        if(_ifstate_.remove(child))
        {
            return;
        }

        if(_elseif_.remove(child))
        {
            return;
        }

        if(_else_ == child)
        {
            _else_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        for(ListIterator i = _ifstate_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator i = _elseif_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_else_ == oldChild)
        {
            setElse((PStatement) newChild);
            return;
        }

    }

    private class Ifstate_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PStatement node = (PStatement) o;

            if((node.parent() != null) &&
                (node.parent() != AIfStatement.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AIfStatement.this))
            {
                node.parent(AIfStatement.this);
            }

            return node;
        }
    }

    private class Elseif_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PStatement node = (PStatement) o;

            if((node.parent() != null) &&
                (node.parent() != AIfStatement.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AIfStatement.this))
            {
                node.parent(AIfStatement.this);
            }

            return node;
        }
    }
}
