/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.node;

import java.util.*;
import tony.analysis.*;

public final class AForStatement extends PStatement
{
    private PSimpleList _l_;
    private PExpression _expression_;
    private PSimpleList _r_;
    private final LinkedList _statement_ = new TypedLinkedList(new Statement_Cast());

    public AForStatement()
    {
    }

    public AForStatement(
        PSimpleList _l_,
        PExpression _expression_,
        PSimpleList _r_,
        List _statement_)
    {
        setL(_l_);

        setExpression(_expression_);

        setR(_r_);

        {
            this._statement_.clear();
            this._statement_.addAll(_statement_);
        }

    }
    public Object clone()
    {
        return new AForStatement(
            (PSimpleList) cloneNode(_l_),
            (PExpression) cloneNode(_expression_),
            (PSimpleList) cloneNode(_r_),
            cloneList(_statement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForStatement(this);
    }

    public PSimpleList getL()
    {
        return _l_;
    }

    public void setL(PSimpleList node)
    {
        if(_l_ != null)
        {
            _l_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _l_ = node;
    }

    public PExpression getExpression()
    {
        return _expression_;
    }

    public void setExpression(PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public PSimpleList getR()
    {
        return _r_;
    }

    public void setR(PSimpleList node)
    {
        if(_r_ != null)
        {
            _r_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _r_ = node;
    }

    public LinkedList getStatement()
    {
        return _statement_;
    }

    public void setStatement(List list)
    {
        _statement_.clear();
        _statement_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_l_)
            + toString(_expression_)
            + toString(_r_)
            + toString(_statement_);
    }

    void removeChild(Node child)
    {
        if(_l_ == child)
        {
            _l_ = null;
            return;
        }

        if(_expression_ == child)
        {
            _expression_ = null;
            return;
        }

        if(_r_ == child)
        {
            _r_ = null;
            return;
        }

        if(_statement_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_l_ == oldChild)
        {
            setL((PSimpleList) newChild);
            return;
        }

        if(_expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(_r_ == oldChild)
        {
            setR((PSimpleList) newChild);
            return;
        }

        for(ListIterator i = _statement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class Statement_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PStatement node = (PStatement) o;

            if((node.parent() != null) &&
                (node.parent() != AForStatement.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AForStatement.this))
            {
                node.parent(AForStatement.this);
            }

            return node;
        }
    }
}
