/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.node;

import java.util.*;
import tony.analysis.*;

public final class AFunctionDefFunction extends PFunction
{
    private PHeader _header_;
    private final LinkedList _function_ = new TypedLinkedList(new Function_Cast());
    private final LinkedList _statement_ = new TypedLinkedList(new Statement_Cast());

    public AFunctionDefFunction()
    {
    }

    public AFunctionDefFunction(
        PHeader _header_,
        List _function_,
        List _statement_)
    {
        setHeader(_header_);

        {
            this._function_.clear();
            this._function_.addAll(_function_);
        }

        {
            this._statement_.clear();
            this._statement_.addAll(_statement_);
        }

    }
    public Object clone()
    {
        return new AFunctionDefFunction(
            (PHeader) cloneNode(_header_),
            cloneList(_function_),
            cloneList(_statement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunctionDefFunction(this);
    }

    public PHeader getHeader()
    {
        return _header_;
    }

    public void setHeader(PHeader node)
    {
        if(_header_ != null)
        {
            _header_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _header_ = node;
    }

    public LinkedList getFunction()
    {
        return _function_;
    }

    public void setFunction(List list)
    {
        _function_.clear();
        _function_.addAll(list);
    }

    public LinkedList getStatement()
    {
        return _statement_;
    }

    public void setStatement(List list)
    {
        _statement_.clear();
        _statement_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_header_)
            + toString(_function_)
            + toString(_statement_);
    }

    void removeChild(Node child)
    {
        if(_header_ == child)
        {
            _header_ = null;
            return;
        }

        if(_function_.remove(child))
        {
            return;
        }

        if(_statement_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_header_ == oldChild)
        {
            setHeader((PHeader) newChild);
            return;
        }

        for(ListIterator i = _function_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator i = _statement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class Function_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PFunction node = (PFunction) o;

            if((node.parent() != null) &&
                (node.parent() != AFunctionDefFunction.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AFunctionDefFunction.this))
            {
                node.parent(AFunctionDefFunction.this);
            }

            return node;
        }
    }

    private class Statement_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PStatement node = (PStatement) o;

            if((node.parent() != null) &&
                (node.parent() != AFunctionDefFunction.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AFunctionDefFunction.this))
            {
                node.parent(AFunctionDefFunction.this);
            }

            return node;
        }
    }
}
