/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.node;

import java.util.*;
import tony.analysis.*;

public final class AMultiSimpleSimpleList extends PSimpleList
{
    private PSimple _simple_;
    private PSimpleList _simpleList_;

    public AMultiSimpleSimpleList()
    {
    }

    public AMultiSimpleSimpleList(
        PSimple _simple_,
        PSimpleList _simpleList_)
    {
        setSimple(_simple_);

        setSimpleList(_simpleList_);

    }
    public Object clone()
    {
        return new AMultiSimpleSimpleList(
            (PSimple) cloneNode(_simple_),
            (PSimpleList) cloneNode(_simpleList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultiSimpleSimpleList(this);
    }

    public PSimple getSimple()
    {
        return _simple_;
    }

    public void setSimple(PSimple node)
    {
        if(_simple_ != null)
        {
            _simple_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _simple_ = node;
    }

    public PSimpleList getSimpleList()
    {
        return _simpleList_;
    }

    public void setSimpleList(PSimpleList node)
    {
        if(_simpleList_ != null)
        {
            _simpleList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _simpleList_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_simple_)
            + toString(_simpleList_);
    }

    void removeChild(Node child)
    {
        if(_simple_ == child)
        {
            _simple_ = null;
            return;
        }

        if(_simpleList_ == child)
        {
            _simpleList_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_simple_ == oldChild)
        {
            setSimple((PSimple) newChild);
            return;
        }

        if(_simpleList_ == oldChild)
        {
            setSimpleList((PSimpleList) newChild);
            return;
        }

    }
}
