/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.node;

import java.util.*;
import tony.analysis.*;

public final class AMultiParameters extends PParameters
{
    private PFormal _formal_;
    private PParameters _parameters_;

    public AMultiParameters()
    {
    }

    public AMultiParameters(
        PFormal _formal_,
        PParameters _parameters_)
    {
        setFormal(_formal_);

        setParameters(_parameters_);

    }
    public Object clone()
    {
        return new AMultiParameters(
            (PFormal) cloneNode(_formal_),
            (PParameters) cloneNode(_parameters_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultiParameters(this);
    }

    public PFormal getFormal()
    {
        return _formal_;
    }

    public void setFormal(PFormal node)
    {
        if(_formal_ != null)
        {
            _formal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _formal_ = node;
    }

    public PParameters getParameters()
    {
        return _parameters_;
    }

    public void setParameters(PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _parameters_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_formal_)
            + toString(_parameters_);
    }

    void removeChild(Node child)
    {
        if(_formal_ == child)
        {
            _formal_ = null;
            return;
        }

        if(_parameters_ == child)
        {
            _parameters_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_formal_ == oldChild)
        {
            setFormal((PFormal) newChild);
            return;
        }

        if(_parameters_ == oldChild)
        {
            setParameters((PParameters) newChild);
            return;
        }

    }
}
