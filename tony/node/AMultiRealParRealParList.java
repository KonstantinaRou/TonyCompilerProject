/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.node;

import java.util.*;
import tony.analysis.*;

public final class AMultiRealParRealParList extends PRealParList
{
    private PExpression _expression_;
    private PRealParList _realParList_;

    public AMultiRealParRealParList()
    {
    }

    public AMultiRealParRealParList(
        PExpression _expression_,
        PRealParList _realParList_)
    {
        setExpression(_expression_);

        setRealParList(_realParList_);

    }
    public Object clone()
    {
        return new AMultiRealParRealParList(
            (PExpression) cloneNode(_expression_),
            (PRealParList) cloneNode(_realParList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultiRealParRealParList(this);
    }

    public PExpression getExpression()
    {
        return _expression_;
    }

    public void setExpression(PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public PRealParList getRealParList()
    {
        return _realParList_;
    }

    public void setRealParList(PRealParList node)
    {
        if(_realParList_ != null)
        {
            _realParList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _realParList_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_expression_)
            + toString(_realParList_);
    }

    void removeChild(Node child)
    {
        if(_expression_ == child)
        {
            _expression_ = null;
            return;
        }

        if(_realParList_ == child)
        {
            _realParList_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(_realParList_ == oldChild)
        {
            setRealParList((PRealParList) newChild);
            return;
        }

    }
}
