/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.node;

import java.util.*;
import tony.analysis.*;

public final class AFormalFormal extends PFormal
{
    private final LinkedList _ref_ = new TypedLinkedList(new Ref_Cast());
    private PType _type_;
    private PIdentifierList _identifierList_;

    public AFormalFormal()
    {
    }

    public AFormalFormal(
        List _ref_,
        PType _type_,
        PIdentifierList _identifierList_)
    {
        {
            this._ref_.clear();
            this._ref_.addAll(_ref_);
        }

        setType(_type_);

        setIdentifierList(_identifierList_);

    }
    public Object clone()
    {
        return new AFormalFormal(
            cloneList(_ref_),
            (PType) cloneNode(_type_),
            (PIdentifierList) cloneNode(_identifierList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFormalFormal(this);
    }

    public LinkedList getRef()
    {
        return _ref_;
    }

    public void setRef(List list)
    {
        _ref_.clear();
        _ref_.addAll(list);
    }

    public PType getType()
    {
        return _type_;
    }

    public void setType(PType node)
    {
        if(_type_ != null)
        {
            _type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _type_ = node;
    }

    public PIdentifierList getIdentifierList()
    {
        return _identifierList_;
    }

    public void setIdentifierList(PIdentifierList node)
    {
        if(_identifierList_ != null)
        {
            _identifierList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifierList_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_ref_)
            + toString(_type_)
            + toString(_identifierList_);
    }

    void removeChild(Node child)
    {
        if(_ref_.remove(child))
        {
            return;
        }

        if(_type_ == child)
        {
            _type_ = null;
            return;
        }

        if(_identifierList_ == child)
        {
            _identifierList_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _ref_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(_identifierList_ == oldChild)
        {
            setIdentifierList((PIdentifierList) newChild);
            return;
        }

    }

    private class Ref_Cast implements Cast
    {
        public Object cast(Object o)
        {
            TRef node = (TRef) o;

            if((node.parent() != null) &&
                (node.parent() != AFormalFormal.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AFormalFormal.this))
            {
                node.parent(AFormalFormal.this);
            }

            return node;
        }
    }
}
