/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.analysis;

import tony.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAFunctionDefFunction(AFunctionDefFunction node);
    void caseAFunctionDeclFunction(AFunctionDeclFunction node);
    void caseAVarDefinitionFunction(AVarDefinitionFunction node);
    void caseAVarDefinition(AVarDefinition node);
    void caseASingleIdListIdentifierList(ASingleIdListIdentifierList node);
    void caseAMultiIdListIdentifierList(AMultiIdListIdentifierList node);
    void caseAHeader(AHeader node);
    void caseASingleParameters(ASingleParameters node);
    void caseAMultiParameters(AMultiParameters node);
    void caseAFormalFormal(AFormalFormal node);
    void caseAIntType(AIntType node);
    void caseABoolType(ABoolType node);
    void caseACharType(ACharType node);
    void caseAArrayTypeType(AArrayTypeType node);
    void caseAListType(AListType node);
    void caseASimpleStatement(ASimpleStatement node);
    void caseAExitStatement(AExitStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseAForStatement(AForStatement node);
    void caseAElseifStatement(AElseifStatement node);
    void caseAElseStatement(AElseStatement node);
    void caseASkipSimple(ASkipSimple node);
    void caseAAtomassSimple(AAtomassSimple node);
    void caseAScallSimple(AScallSimple node);
    void caseASingleSimpleSimpleList(ASingleSimpleSimpleList node);
    void caseAMultiSimpleSimpleList(AMultiSimpleSimpleList node);
    void caseACallCall(ACallCall node);
    void caseASigleRealParRealParList(ASigleRealParRealParList node);
    void caseAMultiRealParRealParList(AMultiRealParRealParList node);
    void caseAAtomAtom(AAtomAtom node);
    void caseAStringLiteralAtom(AStringLiteralAtom node);
    void caseAIndAccessAtom(AIndAccessAtom node);
    void caseAAcallAtom(AAcallAtom node);
    void caseANewExpression(ANewExpression node);
    void caseANilExpression(ANilExpression node);
    void caseAHeadExpression(AHeadExpression node);
    void caseATailExpression(ATailExpression node);
    void caseAOrExpression(AOrExpression node);
    void caseAAndExpression(AAndExpression node);
    void caseANotExpression(ANotExpression node);
    void caseAEqExpression(AEqExpression node);
    void caseANotEqualExpression(ANotEqualExpression node);
    void caseASmallerExpression(ASmallerExpression node);
    void caseABiggerExpression(ABiggerExpression node);
    void caseASmallerEqExpression(ASmallerEqExpression node);
    void caseABiggerEqExpression(ABiggerEqExpression node);
    void caseANilqExpression(ANilqExpression node);
    void caseATrueExpression(ATrueExpression node);
    void caseAFalseExpression(AFalseExpression node);
    void caseAListExpression(AListExpression node);
    void caseAAdditionExpression(AAdditionExpression node);
    void caseASubtractionExpression(ASubtractionExpression node);
    void caseAMultiplicationExpression(AMultiplicationExpression node);
    void caseADivisionExpression(ADivisionExpression node);
    void caseAModuloExpression(AModuloExpression node);
    void caseASignnumberExpression(ASignnumberExpression node);
    void caseAPrExpression(APrExpression node);
    void caseAAtomExpression(AAtomExpression node);
    void caseAConstIntExpression(AConstIntExpression node);
    void caseACharConstExpression(ACharConstExpression node);
    void caseAPlusExpression(APlusExpression node);
    void caseAMinusExpression(AMinusExpression node);

    void caseTComment(TComment node);
    void caseTCommentEnd(TCommentEnd node);
    void caseTCommentBody(TCommentBody node);
    void caseTStar(TStar node);
    void caseTGreater(TGreater node);
    void caseTString(TString node);
    void caseTInt(TInt node);
    void caseTBool(TBool node);
    void caseTChar(TChar node);
    void caseTDef(TDef node);
    void caseTAnd(TAnd node);
    void caseTElse(TElse node);
    void caseTElsif(TElsif node);
    void caseTEnd(TEnd node);
    void caseTExit(TExit node);
    void caseTFalse(TFalse node);
    void caseTFor(TFor node);
    void caseTHead(THead node);
    void caseTIf(TIf node);
    void caseTList(TList node);
    void caseTMod(TMod node);
    void caseTNew(TNew node);
    void caseTNil(TNil node);
    void caseTNilQuestionMark(TNilQuestionMark node);
    void caseTNot(TNot node);
    void caseTOr(TOr node);
    void caseTRef(TRef node);
    void caseTReturn(TReturn node);
    void caseTSkip(TSkip node);
    void caseTTail(TTail node);
    void caseTTrue(TTrue node);
    void caseTDecl(TDecl node);
    void caseTDiv(TDiv node);
    void caseTSharp(TSharp node);
    void caseTSmallerEqual(TSmallerEqual node);
    void caseTBiggerEqual(TBiggerEqual node);
    void caseTEqual(TEqual node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTColon(TColon node);
    void caseTAssign(TAssign node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTConstChar(TConstChar node);
    void caseTConstInt(TConstInt node);
    void caseTId(TId node);
    void caseTMul(TMul node);
    void caseTNotEqual(TNotEqual node);
    void caseTSmaller(TSmaller node);
    void caseTBigger(TBigger node);
    void caseEOF(EOF node);
}
