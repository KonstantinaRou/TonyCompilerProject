/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.analysis;

import java.util.*;
import tony.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    public void caseAFunctionDefFunction(AFunctionDefFunction node)
    {
        defaultCase(node);
    }

    public void caseAFunctionDeclFunction(AFunctionDeclFunction node)
    {
        defaultCase(node);
    }

    public void caseAVarDefinitionFunction(AVarDefinitionFunction node)
    {
        defaultCase(node);
    }

    public void caseAVarDefinition(AVarDefinition node)
    {
        defaultCase(node);
    }

    public void caseASingleIdListIdentifierList(ASingleIdListIdentifierList node)
    {
        defaultCase(node);
    }

    public void caseAMultiIdListIdentifierList(AMultiIdListIdentifierList node)
    {
        defaultCase(node);
    }

    public void caseAHeader(AHeader node)
    {
        defaultCase(node);
    }

    public void caseASingleParameters(ASingleParameters node)
    {
        defaultCase(node);
    }

    public void caseAMultiParameters(AMultiParameters node)
    {
        defaultCase(node);
    }

    public void caseAFormalFormal(AFormalFormal node)
    {
        defaultCase(node);
    }

    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    public void caseABoolType(ABoolType node)
    {
        defaultCase(node);
    }

    public void caseACharType(ACharType node)
    {
        defaultCase(node);
    }

    public void caseAArrayTypeType(AArrayTypeType node)
    {
        defaultCase(node);
    }

    public void caseAListType(AListType node)
    {
        defaultCase(node);
    }

    public void caseASimpleStatement(ASimpleStatement node)
    {
        defaultCase(node);
    }

    public void caseAExitStatement(AExitStatement node)
    {
        defaultCase(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        defaultCase(node);
    }

    public void caseAElseifStatement(AElseifStatement node)
    {
        defaultCase(node);
    }

    public void caseAElseStatement(AElseStatement node)
    {
        defaultCase(node);
    }

    public void caseASkipSimple(ASkipSimple node)
    {
        defaultCase(node);
    }

    public void caseAAtomassSimple(AAtomassSimple node)
    {
        defaultCase(node);
    }

    public void caseAScallSimple(AScallSimple node)
    {
        defaultCase(node);
    }

    public void caseASingleSimpleSimpleList(ASingleSimpleSimpleList node)
    {
        defaultCase(node);
    }

    public void caseAMultiSimpleSimpleList(AMultiSimpleSimpleList node)
    {
        defaultCase(node);
    }

    public void caseACallCall(ACallCall node)
    {
        defaultCase(node);
    }

    public void caseASigleRealParRealParList(ASigleRealParRealParList node)
    {
        defaultCase(node);
    }

    public void caseAMultiRealParRealParList(AMultiRealParRealParList node)
    {
        defaultCase(node);
    }

    public void caseAAtomAtom(AAtomAtom node)
    {
        defaultCase(node);
    }

    public void caseAStringLiteralAtom(AStringLiteralAtom node)
    {
        defaultCase(node);
    }

    public void caseAIndAccessAtom(AIndAccessAtom node)
    {
        defaultCase(node);
    }

    public void caseAAcallAtom(AAcallAtom node)
    {
        defaultCase(node);
    }

    public void caseANewExpression(ANewExpression node)
    {
        defaultCase(node);
    }

    public void caseANilExpression(ANilExpression node)
    {
        defaultCase(node);
    }

    public void caseAHeadExpression(AHeadExpression node)
    {
        defaultCase(node);
    }

    public void caseATailExpression(ATailExpression node)
    {
        defaultCase(node);
    }

    public void caseAOrExpression(AOrExpression node)
    {
        defaultCase(node);
    }

    public void caseAAndExpression(AAndExpression node)
    {
        defaultCase(node);
    }

    public void caseANotExpression(ANotExpression node)
    {
        defaultCase(node);
    }

    public void caseAEqExpression(AEqExpression node)
    {
        defaultCase(node);
    }

    public void caseANotEqualExpression(ANotEqualExpression node)
    {
        defaultCase(node);
    }

    public void caseASmallerExpression(ASmallerExpression node)
    {
        defaultCase(node);
    }

    public void caseABiggerExpression(ABiggerExpression node)
    {
        defaultCase(node);
    }

    public void caseASmallerEqExpression(ASmallerEqExpression node)
    {
        defaultCase(node);
    }

    public void caseABiggerEqExpression(ABiggerEqExpression node)
    {
        defaultCase(node);
    }

    public void caseANilqExpression(ANilqExpression node)
    {
        defaultCase(node);
    }

    public void caseATrueExpression(ATrueExpression node)
    {
        defaultCase(node);
    }

    public void caseAFalseExpression(AFalseExpression node)
    {
        defaultCase(node);
    }

    public void caseAListExpression(AListExpression node)
    {
        defaultCase(node);
    }

    public void caseAAdditionExpression(AAdditionExpression node)
    {
        defaultCase(node);
    }

    public void caseASubtractionExpression(ASubtractionExpression node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultCase(node);
    }

    public void caseADivisionExpression(ADivisionExpression node)
    {
        defaultCase(node);
    }

    public void caseAModuloExpression(AModuloExpression node)
    {
        defaultCase(node);
    }

    public void caseASignnumberExpression(ASignnumberExpression node)
    {
        defaultCase(node);
    }

    public void caseAPrExpression(APrExpression node)
    {
        defaultCase(node);
    }

    public void caseAAtomExpression(AAtomExpression node)
    {
        defaultCase(node);
    }

    public void caseAConstIntExpression(AConstIntExpression node)
    {
        defaultCase(node);
    }

    public void caseACharConstExpression(ACharConstExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusExpression(APlusExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusExpression(AMinusExpression node)
    {
        defaultCase(node);
    }

    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    public void caseTCommentEnd(TCommentEnd node)
    {
        defaultCase(node);
    }

    public void caseTCommentBody(TCommentBody node)
    {
        defaultCase(node);
    }

    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    public void caseTGreater(TGreater node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTBool(TBool node)
    {
        defaultCase(node);
    }

    public void caseTChar(TChar node)
    {
        defaultCase(node);
    }

    public void caseTDef(TDef node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTElsif(TElsif node)
    {
        defaultCase(node);
    }

    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }

    public void caseTExit(TExit node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTHead(THead node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTList(TList node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    public void caseTNil(TNil node)
    {
        defaultCase(node);
    }

    public void caseTNilQuestionMark(TNilQuestionMark node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTRef(TRef node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTSkip(TSkip node)
    {
        defaultCase(node);
    }

    public void caseTTail(TTail node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTDecl(TDecl node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTSharp(TSharp node)
    {
        defaultCase(node);
    }

    public void caseTSmallerEqual(TSmallerEqual node)
    {
        defaultCase(node);
    }

    public void caseTBiggerEqual(TBiggerEqual node)
    {
        defaultCase(node);
    }

    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTLBr(TLBr node)
    {
        defaultCase(node);
    }

    public void caseTRBr(TRBr node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTConstChar(TConstChar node)
    {
        defaultCase(node);
    }

    public void caseTConstInt(TConstInt node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTMul(TMul node)
    {
        defaultCase(node);
    }

    public void caseTNotEqual(TNotEqual node)
    {
        defaultCase(node);
    }

    public void caseTSmaller(TSmaller node)
    {
        defaultCase(node);
    }

    public void caseTBigger(TBigger node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
