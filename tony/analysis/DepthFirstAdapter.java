/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.analysis;

import java.util.*;
import tony.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAProgram(node);
    }

    public void inAFunctionDefFunction(AFunctionDefFunction node)
    {
        defaultIn(node);
    }

    public void outAFunctionDefFunction(AFunctionDefFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunctionDefFunction(AFunctionDefFunction node)
    {
        inAFunctionDefFunction(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        {
            Object temp[] = node.getFunction().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PFunction) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getStatement().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PStatement) temp[i]).apply(this);
            }
        }
        outAFunctionDefFunction(node);
    }

    public void inAFunctionDeclFunction(AFunctionDeclFunction node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclFunction(AFunctionDeclFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunctionDeclFunction(AFunctionDeclFunction node)
    {
        inAFunctionDeclFunction(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        outAFunctionDeclFunction(node);
    }

    public void inAVarDefinitionFunction(AVarDefinitionFunction node)
    {
        defaultIn(node);
    }

    public void outAVarDefinitionFunction(AVarDefinitionFunction node)
    {
        defaultOut(node);
    }

    public void caseAVarDefinitionFunction(AVarDefinitionFunction node)
    {
        inAVarDefinitionFunction(node);
        if(node.getVarDefinition() != null)
        {
            node.getVarDefinition().apply(this);
        }
        outAVarDefinitionFunction(node);
    }

    public void inAVarDefinition(AVarDefinition node)
    {
        defaultIn(node);
    }

    public void outAVarDefinition(AVarDefinition node)
    {
        defaultOut(node);
    }

    public void caseAVarDefinition(AVarDefinition node)
    {
        inAVarDefinition(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifierList() != null)
        {
            node.getIdentifierList().apply(this);
        }
        outAVarDefinition(node);
    }

    public void inASingleIdListIdentifierList(ASingleIdListIdentifierList node)
    {
        defaultIn(node);
    }

    public void outASingleIdListIdentifierList(ASingleIdListIdentifierList node)
    {
        defaultOut(node);
    }

    public void caseASingleIdListIdentifierList(ASingleIdListIdentifierList node)
    {
        inASingleIdListIdentifierList(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outASingleIdListIdentifierList(node);
    }

    public void inAMultiIdListIdentifierList(AMultiIdListIdentifierList node)
    {
        defaultIn(node);
    }

    public void outAMultiIdListIdentifierList(AMultiIdListIdentifierList node)
    {
        defaultOut(node);
    }

    public void caseAMultiIdListIdentifierList(AMultiIdListIdentifierList node)
    {
        inAMultiIdListIdentifierList(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getIdentifierList() != null)
        {
            node.getIdentifierList().apply(this);
        }
        outAMultiIdListIdentifierList(node);
    }

    public void inAHeader(AHeader node)
    {
        defaultIn(node);
    }

    public void outAHeader(AHeader node)
    {
        defaultOut(node);
    }

    public void caseAHeader(AHeader node)
    {
        inAHeader(node);
        {
            Object temp[] = node.getType().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PType) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getParameters().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PParameters) temp[i]).apply(this);
            }
        }
        outAHeader(node);
    }

    public void inASingleParameters(ASingleParameters node)
    {
        defaultIn(node);
    }

    public void outASingleParameters(ASingleParameters node)
    {
        defaultOut(node);
    }

    public void caseASingleParameters(ASingleParameters node)
    {
        inASingleParameters(node);
        if(node.getFormal() != null)
        {
            node.getFormal().apply(this);
        }
        outASingleParameters(node);
    }

    public void inAMultiParameters(AMultiParameters node)
    {
        defaultIn(node);
    }

    public void outAMultiParameters(AMultiParameters node)
    {
        defaultOut(node);
    }

    public void caseAMultiParameters(AMultiParameters node)
    {
        inAMultiParameters(node);
        if(node.getFormal() != null)
        {
            node.getFormal().apply(this);
        }
        if(node.getParameters() != null)
        {
            node.getParameters().apply(this);
        }
        outAMultiParameters(node);
    }

    public void inAFormalFormal(AFormalFormal node)
    {
        defaultIn(node);
    }

    public void outAFormalFormal(AFormalFormal node)
    {
        defaultOut(node);
    }

    public void caseAFormalFormal(AFormalFormal node)
    {
        inAFormalFormal(node);
        {
            Object temp[] = node.getRef().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TRef) temp[i]).apply(this);
            }
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifierList() != null)
        {
            node.getIdentifierList().apply(this);
        }
        outAFormalFormal(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        outAIntType(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        outABoolType(node);
    }

    public void inACharType(ACharType node)
    {
        defaultIn(node);
    }

    public void outACharType(ACharType node)
    {
        defaultOut(node);
    }

    public void caseACharType(ACharType node)
    {
        inACharType(node);
        outACharType(node);
    }

    public void inAArrayTypeType(AArrayTypeType node)
    {
        defaultIn(node);
    }

    public void outAArrayTypeType(AArrayTypeType node)
    {
        defaultOut(node);
    }

    public void caseAArrayTypeType(AArrayTypeType node)
    {
        inAArrayTypeType(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAArrayTypeType(node);
    }

    public void inAListType(AListType node)
    {
        defaultIn(node);
    }

    public void outAListType(AListType node)
    {
        defaultOut(node);
    }

    public void caseAListType(AListType node)
    {
        inAListType(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAListType(node);
    }

    public void inASimpleStatement(ASimpleStatement node)
    {
        defaultIn(node);
    }

    public void outASimpleStatement(ASimpleStatement node)
    {
        defaultOut(node);
    }

    public void caseASimpleStatement(ASimpleStatement node)
    {
        inASimpleStatement(node);
        if(node.getSimple() != null)
        {
            node.getSimple().apply(this);
        }
        outASimpleStatement(node);
    }

    public void inAExitStatement(AExitStatement node)
    {
        defaultIn(node);
    }

    public void outAExitStatement(AExitStatement node)
    {
        defaultOut(node);
    }

    public void caseAExitStatement(AExitStatement node)
    {
        inAExitStatement(node);
        outAExitStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getIfstate().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PStatement) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getElseif().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PStatement) temp[i]).apply(this);
            }
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        {
            Object temp[] = node.getStatement().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PStatement) temp[i]).apply(this);
            }
        }
        outAForStatement(node);
    }

    public void inAElseifStatement(AElseifStatement node)
    {
        defaultIn(node);
    }

    public void outAElseifStatement(AElseifStatement node)
    {
        defaultOut(node);
    }

    public void caseAElseifStatement(AElseifStatement node)
    {
        inAElseifStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getStatement().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PStatement) temp[i]).apply(this);
            }
        }
        outAElseifStatement(node);
    }

    public void inAElseStatement(AElseStatement node)
    {
        defaultIn(node);
    }

    public void outAElseStatement(AElseStatement node)
    {
        defaultOut(node);
    }

    public void caseAElseStatement(AElseStatement node)
    {
        inAElseStatement(node);
        {
            Object temp[] = node.getStatement().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PStatement) temp[i]).apply(this);
            }
        }
        outAElseStatement(node);
    }

    public void inASkipSimple(ASkipSimple node)
    {
        defaultIn(node);
    }

    public void outASkipSimple(ASkipSimple node)
    {
        defaultOut(node);
    }

    public void caseASkipSimple(ASkipSimple node)
    {
        inASkipSimple(node);
        outASkipSimple(node);
    }

    public void inAAtomassSimple(AAtomassSimple node)
    {
        defaultIn(node);
    }

    public void outAAtomassSimple(AAtomassSimple node)
    {
        defaultOut(node);
    }

    public void caseAAtomassSimple(AAtomassSimple node)
    {
        inAAtomassSimple(node);
        if(node.getAtom() != null)
        {
            node.getAtom().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAtomassSimple(node);
    }

    public void inAScallSimple(AScallSimple node)
    {
        defaultIn(node);
    }

    public void outAScallSimple(AScallSimple node)
    {
        defaultOut(node);
    }

    public void caseAScallSimple(AScallSimple node)
    {
        inAScallSimple(node);
        if(node.getCall() != null)
        {
            node.getCall().apply(this);
        }
        outAScallSimple(node);
    }

    public void inASingleSimpleSimpleList(ASingleSimpleSimpleList node)
    {
        defaultIn(node);
    }

    public void outASingleSimpleSimpleList(ASingleSimpleSimpleList node)
    {
        defaultOut(node);
    }

    public void caseASingleSimpleSimpleList(ASingleSimpleSimpleList node)
    {
        inASingleSimpleSimpleList(node);
        if(node.getSimple() != null)
        {
            node.getSimple().apply(this);
        }
        outASingleSimpleSimpleList(node);
    }

    public void inAMultiSimpleSimpleList(AMultiSimpleSimpleList node)
    {
        defaultIn(node);
    }

    public void outAMultiSimpleSimpleList(AMultiSimpleSimpleList node)
    {
        defaultOut(node);
    }

    public void caseAMultiSimpleSimpleList(AMultiSimpleSimpleList node)
    {
        inAMultiSimpleSimpleList(node);
        if(node.getSimple() != null)
        {
            node.getSimple().apply(this);
        }
        if(node.getSimpleList() != null)
        {
            node.getSimpleList().apply(this);
        }
        outAMultiSimpleSimpleList(node);
    }

    public void inACallCall(ACallCall node)
    {
        defaultIn(node);
    }

    public void outACallCall(ACallCall node)
    {
        defaultOut(node);
    }

    public void caseACallCall(ACallCall node)
    {
        inACallCall(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getRealParList().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PRealParList) temp[i]).apply(this);
            }
        }
        outACallCall(node);
    }

    public void inASigleRealParRealParList(ASigleRealParRealParList node)
    {
        defaultIn(node);
    }

    public void outASigleRealParRealParList(ASigleRealParRealParList node)
    {
        defaultOut(node);
    }

    public void caseASigleRealParRealParList(ASigleRealParRealParList node)
    {
        inASigleRealParRealParList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASigleRealParRealParList(node);
    }

    public void inAMultiRealParRealParList(AMultiRealParRealParList node)
    {
        defaultIn(node);
    }

    public void outAMultiRealParRealParList(AMultiRealParRealParList node)
    {
        defaultOut(node);
    }

    public void caseAMultiRealParRealParList(AMultiRealParRealParList node)
    {
        inAMultiRealParRealParList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRealParList() != null)
        {
            node.getRealParList().apply(this);
        }
        outAMultiRealParRealParList(node);
    }

    public void inAAtomAtom(AAtomAtom node)
    {
        defaultIn(node);
    }

    public void outAAtomAtom(AAtomAtom node)
    {
        defaultOut(node);
    }

    public void caseAAtomAtom(AAtomAtom node)
    {
        inAAtomAtom(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAtomAtom(node);
    }

    public void inAStringLiteralAtom(AStringLiteralAtom node)
    {
        defaultIn(node);
    }

    public void outAStringLiteralAtom(AStringLiteralAtom node)
    {
        defaultOut(node);
    }

    public void caseAStringLiteralAtom(AStringLiteralAtom node)
    {
        inAStringLiteralAtom(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringLiteralAtom(node);
    }

    public void inAIndAccessAtom(AIndAccessAtom node)
    {
        defaultIn(node);
    }

    public void outAIndAccessAtom(AIndAccessAtom node)
    {
        defaultOut(node);
    }

    public void caseAIndAccessAtom(AIndAccessAtom node)
    {
        inAIndAccessAtom(node);
        if(node.getAtom() != null)
        {
            node.getAtom().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIndAccessAtom(node);
    }

    public void inAAcallAtom(AAcallAtom node)
    {
        defaultIn(node);
    }

    public void outAAcallAtom(AAcallAtom node)
    {
        defaultOut(node);
    }

    public void caseAAcallAtom(AAcallAtom node)
    {
        inAAcallAtom(node);
        if(node.getCall() != null)
        {
            node.getCall().apply(this);
        }
        outAAcallAtom(node);
    }

    public void inANewExpression(ANewExpression node)
    {
        defaultIn(node);
    }

    public void outANewExpression(ANewExpression node)
    {
        defaultOut(node);
    }

    public void caseANewExpression(ANewExpression node)
    {
        inANewExpression(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outANewExpression(node);
    }

    public void inANilExpression(ANilExpression node)
    {
        defaultIn(node);
    }

    public void outANilExpression(ANilExpression node)
    {
        defaultOut(node);
    }

    public void caseANilExpression(ANilExpression node)
    {
        inANilExpression(node);
        outANilExpression(node);
    }

    public void inAHeadExpression(AHeadExpression node)
    {
        defaultIn(node);
    }

    public void outAHeadExpression(AHeadExpression node)
    {
        defaultOut(node);
    }

    public void caseAHeadExpression(AHeadExpression node)
    {
        inAHeadExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAHeadExpression(node);
    }

    public void inATailExpression(ATailExpression node)
    {
        defaultIn(node);
    }

    public void outATailExpression(ATailExpression node)
    {
        defaultOut(node);
    }

    public void caseATailExpression(ATailExpression node)
    {
        inATailExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outATailExpression(node);
    }

    public void inAOrExpression(AOrExpression node)
    {
        defaultIn(node);
    }

    public void outAOrExpression(AOrExpression node)
    {
        defaultOut(node);
    }

    public void caseAOrExpression(AOrExpression node)
    {
        inAOrExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAOrExpression(node);
    }

    public void inAAndExpression(AAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAndExpression(AAndExpression node)
    {
        defaultOut(node);
    }

    public void caseAAndExpression(AAndExpression node)
    {
        inAAndExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAAndExpression(node);
    }

    public void inANotExpression(ANotExpression node)
    {
        defaultIn(node);
    }

    public void outANotExpression(ANotExpression node)
    {
        defaultOut(node);
    }

    public void caseANotExpression(ANotExpression node)
    {
        inANotExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outANotExpression(node);
    }

    public void inAEqExpression(AEqExpression node)
    {
        defaultIn(node);
    }

    public void outAEqExpression(AEqExpression node)
    {
        defaultOut(node);
    }

    public void caseAEqExpression(AEqExpression node)
    {
        inAEqExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAEqExpression(node);
    }

    public void inANotEqualExpression(ANotEqualExpression node)
    {
        defaultIn(node);
    }

    public void outANotEqualExpression(ANotEqualExpression node)
    {
        defaultOut(node);
    }

    public void caseANotEqualExpression(ANotEqualExpression node)
    {
        inANotEqualExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outANotEqualExpression(node);
    }

    public void inASmallerExpression(ASmallerExpression node)
    {
        defaultIn(node);
    }

    public void outASmallerExpression(ASmallerExpression node)
    {
        defaultOut(node);
    }

    public void caseASmallerExpression(ASmallerExpression node)
    {
        inASmallerExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outASmallerExpression(node);
    }

    public void inABiggerExpression(ABiggerExpression node)
    {
        defaultIn(node);
    }

    public void outABiggerExpression(ABiggerExpression node)
    {
        defaultOut(node);
    }

    public void caseABiggerExpression(ABiggerExpression node)
    {
        inABiggerExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outABiggerExpression(node);
    }

    public void inASmallerEqExpression(ASmallerEqExpression node)
    {
        defaultIn(node);
    }

    public void outASmallerEqExpression(ASmallerEqExpression node)
    {
        defaultOut(node);
    }

    public void caseASmallerEqExpression(ASmallerEqExpression node)
    {
        inASmallerEqExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outASmallerEqExpression(node);
    }

    public void inABiggerEqExpression(ABiggerEqExpression node)
    {
        defaultIn(node);
    }

    public void outABiggerEqExpression(ABiggerEqExpression node)
    {
        defaultOut(node);
    }

    public void caseABiggerEqExpression(ABiggerEqExpression node)
    {
        inABiggerEqExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outABiggerEqExpression(node);
    }

    public void inANilqExpression(ANilqExpression node)
    {
        defaultIn(node);
    }

    public void outANilqExpression(ANilqExpression node)
    {
        defaultOut(node);
    }

    public void caseANilqExpression(ANilqExpression node)
    {
        inANilqExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outANilqExpression(node);
    }

    public void inATrueExpression(ATrueExpression node)
    {
        defaultIn(node);
    }

    public void outATrueExpression(ATrueExpression node)
    {
        defaultOut(node);
    }

    public void caseATrueExpression(ATrueExpression node)
    {
        inATrueExpression(node);
        outATrueExpression(node);
    }

    public void inAFalseExpression(AFalseExpression node)
    {
        defaultIn(node);
    }

    public void outAFalseExpression(AFalseExpression node)
    {
        defaultOut(node);
    }

    public void caseAFalseExpression(AFalseExpression node)
    {
        inAFalseExpression(node);
        outAFalseExpression(node);
    }

    public void inAListExpression(AListExpression node)
    {
        defaultIn(node);
    }

    public void outAListExpression(AListExpression node)
    {
        defaultOut(node);
    }

    public void caseAListExpression(AListExpression node)
    {
        inAListExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAListExpression(node);
    }

    public void inAAdditionExpression(AAdditionExpression node)
    {
        defaultIn(node);
    }

    public void outAAdditionExpression(AAdditionExpression node)
    {
        defaultOut(node);
    }

    public void caseAAdditionExpression(AAdditionExpression node)
    {
        inAAdditionExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAAdditionExpression(node);
    }

    public void inASubtractionExpression(ASubtractionExpression node)
    {
        defaultIn(node);
    }

    public void outASubtractionExpression(ASubtractionExpression node)
    {
        defaultOut(node);
    }

    public void caseASubtractionExpression(ASubtractionExpression node)
    {
        inASubtractionExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outASubtractionExpression(node);
    }

    public void inAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicationExpression(AMultiplicationExpression node)
    {
        inAMultiplicationExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAMultiplicationExpression(node);
    }

    public void inADivisionExpression(ADivisionExpression node)
    {
        defaultIn(node);
    }

    public void outADivisionExpression(ADivisionExpression node)
    {
        defaultOut(node);
    }

    public void caseADivisionExpression(ADivisionExpression node)
    {
        inADivisionExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outADivisionExpression(node);
    }

    public void inAModuloExpression(AModuloExpression node)
    {
        defaultIn(node);
    }

    public void outAModuloExpression(AModuloExpression node)
    {
        defaultOut(node);
    }

    public void caseAModuloExpression(AModuloExpression node)
    {
        inAModuloExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAModuloExpression(node);
    }

    public void inASignnumberExpression(ASignnumberExpression node)
    {
        defaultIn(node);
    }

    public void outASignnumberExpression(ASignnumberExpression node)
    {
        defaultOut(node);
    }

    public void caseASignnumberExpression(ASignnumberExpression node)
    {
        inASignnumberExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outASignnumberExpression(node);
    }

    public void inAPrExpression(APrExpression node)
    {
        defaultIn(node);
    }

    public void outAPrExpression(APrExpression node)
    {
        defaultOut(node);
    }

    public void caseAPrExpression(APrExpression node)
    {
        inAPrExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPrExpression(node);
    }

    public void inAAtomExpression(AAtomExpression node)
    {
        defaultIn(node);
    }

    public void outAAtomExpression(AAtomExpression node)
    {
        defaultOut(node);
    }

    public void caseAAtomExpression(AAtomExpression node)
    {
        inAAtomExpression(node);
        if(node.getAtom() != null)
        {
            node.getAtom().apply(this);
        }
        outAAtomExpression(node);
    }

    public void inAConstIntExpression(AConstIntExpression node)
    {
        defaultIn(node);
    }

    public void outAConstIntExpression(AConstIntExpression node)
    {
        defaultOut(node);
    }

    public void caseAConstIntExpression(AConstIntExpression node)
    {
        inAConstIntExpression(node);
        if(node.getConstInt() != null)
        {
            node.getConstInt().apply(this);
        }
        outAConstIntExpression(node);
    }

    public void inACharConstExpression(ACharConstExpression node)
    {
        defaultIn(node);
    }

    public void outACharConstExpression(ACharConstExpression node)
    {
        defaultOut(node);
    }

    public void caseACharConstExpression(ACharConstExpression node)
    {
        inACharConstExpression(node);
        if(node.getConstChar() != null)
        {
            node.getConstChar().apply(this);
        }
        outACharConstExpression(node);
    }

    public void inAPlusExpression(APlusExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusExpression(APlusExpression node)
    {
        defaultOut(node);
    }

    public void caseAPlusExpression(APlusExpression node)
    {
        inAPlusExpression(node);
        outAPlusExpression(node);
    }

    public void inAMinusExpression(AMinusExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusExpression(AMinusExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinusExpression(AMinusExpression node)
    {
        inAMinusExpression(node);
        outAMinusExpression(node);
    }
}
