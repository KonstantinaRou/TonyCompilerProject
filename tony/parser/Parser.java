/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.parser;

import tony.lexer.*;
import tony.node.*;
import tony.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
	this.nodeList = listNode;

        if(!stack.hasNext())
        {
            stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return (ArrayList) ((State) stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(lexer.next());
                        push(action[1], list);
                        last_shift = action[1];
                    }
		    break;
                case REDUCE:
                    switch(action[1])
                    {

                    case 0:
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;


                    case 1:
		    {
			ArrayList list = new1();
			push(goTo(1), list);
		    }
		    break;


                    case 2:
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;


                    case 3:
		    {
			ArrayList list = new3();
			push(goTo(2), list);
		    }
		    break;


                    case 4:
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;


                    case 5:
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;


                    case 6:
		    {
			ArrayList list = new6();
			push(goTo(3), list);
		    }
		    break;


                    case 7:
		    {
			ArrayList list = new7();
			push(goTo(4), list);
		    }
		    break;


                    case 8:
		    {
			ArrayList list = new8();
			push(goTo(4), list);
		    }
		    break;


                    case 9:
		    {
			ArrayList list = new9();
			push(goTo(5), list);
		    }
		    break;


                    case 10:
		    {
			ArrayList list = new10();
			push(goTo(5), list);
		    }
		    break;


                    case 11:
		    {
			ArrayList list = new11();
			push(goTo(5), list);
		    }
		    break;


                    case 12:
		    {
			ArrayList list = new12();
			push(goTo(5), list);
		    }
		    break;


                    case 13:
		    {
			ArrayList list = new13();
			push(goTo(6), list);
		    }
		    break;


                    case 14:
		    {
			ArrayList list = new14();
			push(goTo(6), list);
		    }
		    break;


                    case 15:
		    {
			ArrayList list = new15();
			push(goTo(7), list);
		    }
		    break;


                    case 16:
		    {
			ArrayList list = new16();
			push(goTo(7), list);
		    }
		    break;


                    case 17:
		    {
			ArrayList list = new17();
			push(goTo(8), list);
		    }
		    break;


                    case 18:
		    {
			ArrayList list = new18();
			push(goTo(8), list);
		    }
		    break;


                    case 19:
		    {
			ArrayList list = new19();
			push(goTo(8), list);
		    }
		    break;


                    case 20:
		    {
			ArrayList list = new20();
			push(goTo(8), list);
		    }
		    break;


                    case 21:
		    {
			ArrayList list = new21();
			push(goTo(8), list);
		    }
		    break;


                    case 22:
		    {
			ArrayList list = new22();
			push(goTo(9), list);
		    }
		    break;


                    case 23:
		    {
			ArrayList list = new23();
			push(goTo(9), list);
		    }
		    break;


                    case 24:
		    {
			ArrayList list = new24();
			push(goTo(9), list);
		    }
		    break;


                    case 25:
		    {
			ArrayList list = new25();
			push(goTo(9), list);
		    }
		    break;


                    case 26:
		    {
			ArrayList list = new26();
			push(goTo(9), list);
		    }
		    break;


                    case 27:
		    {
			ArrayList list = new27();
			push(goTo(9), list);
		    }
		    break;


                    case 28:
		    {
			ArrayList list = new28();
			push(goTo(9), list);
		    }
		    break;


                    case 29:
		    {
			ArrayList list = new29();
			push(goTo(9), list);
		    }
		    break;


                    case 30:
		    {
			ArrayList list = new30();
			push(goTo(10), list);
		    }
		    break;


                    case 31:
		    {
			ArrayList list = new31();
			push(goTo(11), list);
		    }
		    break;


                    case 32:
		    {
			ArrayList list = new32();
			push(goTo(12), list);
		    }
		    break;


                    case 33:
		    {
			ArrayList list = new33();
			push(goTo(12), list);
		    }
		    break;


                    case 34:
		    {
			ArrayList list = new34();
			push(goTo(12), list);
		    }
		    break;


                    case 35:
		    {
			ArrayList list = new35();
			push(goTo(13), list);
		    }
		    break;


                    case 36:
		    {
			ArrayList list = new36();
			push(goTo(13), list);
		    }
		    break;


                    case 37:
		    {
			ArrayList list = new37();
			push(goTo(14), list);
		    }
		    break;


                    case 38:
		    {
			ArrayList list = new38();
			push(goTo(14), list);
		    }
		    break;


                    case 39:
		    {
			ArrayList list = new39();
			push(goTo(15), list);
		    }
		    break;


                    case 40:
		    {
			ArrayList list = new40();
			push(goTo(15), list);
		    }
		    break;


                    case 41:
		    {
			ArrayList list = new41();
			push(goTo(16), list);
		    }
		    break;


                    case 42:
		    {
			ArrayList list = new42();
			push(goTo(16), list);
		    }
		    break;


                    case 43:
		    {
			ArrayList list = new43();
			push(goTo(16), list);
		    }
		    break;


                    case 44:
		    {
			ArrayList list = new44();
			push(goTo(16), list);
		    }
		    break;


                    case 45:
		    {
			ArrayList list = new45();
			push(goTo(17), list);
		    }
		    break;


                    case 46:
		    {
			ArrayList list = new46();
			push(goTo(17), list);
		    }
		    break;


                    case 47:
		    {
			ArrayList list = new47();
			push(goTo(17), list);
		    }
		    break;


                    case 48:
		    {
			ArrayList list = new48();
			push(goTo(17), list);
		    }
		    break;


                    case 49:
		    {
			ArrayList list = new49();
			push(goTo(17), list);
		    }
		    break;


                    case 50:
		    {
			ArrayList list = new50();
			push(goTo(18), list);
		    }
		    break;


                    case 51:
		    {
			ArrayList list = new51();
			push(goTo(18), list);
		    }
		    break;


                    case 52:
		    {
			ArrayList list = new52();
			push(goTo(19), list);
		    }
		    break;


                    case 53:
		    {
			ArrayList list = new53();
			push(goTo(19), list);
		    }
		    break;


                    case 54:
		    {
			ArrayList list = new54();
			push(goTo(20), list);
		    }
		    break;


                    case 55:
		    {
			ArrayList list = new55();
			push(goTo(20), list);
		    }
		    break;


                    case 56:
		    {
			ArrayList list = new56();
			push(goTo(21), list);
		    }
		    break;


                    case 57:
		    {
			ArrayList list = new57();
			push(goTo(21), list);
		    }
		    break;


                    case 58:
		    {
			ArrayList list = new58();
			push(goTo(21), list);
		    }
		    break;


                    case 59:
		    {
			ArrayList list = new59();
			push(goTo(21), list);
		    }
		    break;


                    case 60:
		    {
			ArrayList list = new60();
			push(goTo(21), list);
		    }
		    break;


                    case 61:
		    {
			ArrayList list = new61();
			push(goTo(21), list);
		    }
		    break;


                    case 62:
		    {
			ArrayList list = new62();
			push(goTo(21), list);
		    }
		    break;


                    case 63:
		    {
			ArrayList list = new63();
			push(goTo(21), list);
		    }
		    break;


                    case 64:
		    {
			ArrayList list = new64();
			push(goTo(21), list);
		    }
		    break;


                    case 65:
		    {
			ArrayList list = new65();
			push(goTo(21), list);
		    }
		    break;


                    case 66:
		    {
			ArrayList list = new66();
			push(goTo(22), list);
		    }
		    break;


                    case 67:
		    {
			ArrayList list = new67();
			push(goTo(22), list);
		    }
		    break;


                    case 68:
		    {
			ArrayList list = new68();
			push(goTo(23), list);
		    }
		    break;


                    case 69:
		    {
			ArrayList list = new69();
			push(goTo(23), list);
		    }
		    break;


                    case 70:
		    {
			ArrayList list = new70();
			push(goTo(23), list);
		    }
		    break;


                    case 71:
		    {
			ArrayList list = new71();
			push(goTo(24), list);
		    }
		    break;


                    case 72:
		    {
			ArrayList list = new72();
			push(goTo(24), list);
		    }
		    break;


                    case 73:
		    {
			ArrayList list = new73();
			push(goTo(24), list);
		    }
		    break;


                    case 74:
		    {
			ArrayList list = new74();
			push(goTo(24), list);
		    }
		    break;


                    case 75:
		    {
			ArrayList list = new75();
			push(goTo(25), list);
		    }
		    break;


                    case 76:
		    {
			ArrayList list = new76();
			push(goTo(25), list);
		    }
		    break;


                    case 77:
		    {
			ArrayList list = new77();
			push(goTo(25), list);
		    }
		    break;


                    case 78:
		    {
			ArrayList list = new78();
			push(goTo(26), list);
		    }
		    break;


                    case 79:
		    {
			ArrayList list = new79();
			push(goTo(26), list);
		    }
		    break;


                    case 80:
		    {
			ArrayList list = new80();
			push(goTo(26), list);
		    }
		    break;


                    case 81:
		    {
			ArrayList list = new81();
			push(goTo(27), list);
		    }
		    break;


                    case 82:
		    {
			ArrayList list = new82();
			push(goTo(27), list);
		    }
		    break;


                    case 83:
		    {
			ArrayList list = new83();
			push(goTo(28), list);
		    }
		    break;


                    case 84:
		    {
			ArrayList list = new84();
			push(goTo(28), list);
		    }
		    break;


                    case 85:
		    {
			ArrayList list = new85();
			push(goTo(29), list);
		    }
		    break;


                    case 86:
		    {
			ArrayList list = new86();
			push(goTo(29), list);
		    }
		    break;


                    case 87:
		    {
			ArrayList list = new87();
			push(goTo(30), list);
		    }
		    break;


                    case 88:
		    {
			ArrayList list = new88();
			push(goTo(30), list);
		    }
		    break;

                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PProgram node1 = (PProgram) ((ArrayList)pop()).get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }



    ArrayList new0()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PProgram pprogramNode1;
        {
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pfunctionNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    ArrayList new1()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        PHeader pheaderNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        TypedLinkedList listNode5 = new TypedLinkedList();
        pheaderNode2 = (PHeader)nodeArrayList2.get(0);
        {
        }
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfunctionNode1 = new AFunctionDefFunction(pheaderNode2, listNode3, listNode5);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new2()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        PHeader pheaderNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        pheaderNode2 = (PHeader)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pfunctionNode1 = new AFunctionDefFunction(pheaderNode2, listNode4, listNode6);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new3()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        pfunctionNode1 = (PFunction)nodeArrayList1.get(0);
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new4()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        PHeader pheaderNode2;
        pheaderNode2 = (PHeader)nodeArrayList2.get(0);

        pfunctionNode1 = new AFunctionDeclFunction(pheaderNode2);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new5()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        PVarDefinition pvardefinitionNode2;
        pvardefinitionNode2 = (PVarDefinition)nodeArrayList1.get(0);

        pfunctionNode1 = new AVarDefinitionFunction(pvardefinitionNode2);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new6()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PVarDefinition pvardefinitionNode1;
        {
        PType ptypeNode2;
        PIdentifierList pidentifierlistNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        pidentifierlistNode3 = (PIdentifierList)nodeArrayList2.get(0);

        pvardefinitionNode1 = new AVarDefinition(ptypeNode2, pidentifierlistNode3);
        }
	nodeList.add(pvardefinitionNode1);
        return nodeList;
    }



    ArrayList new7()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PIdentifierList pidentifierlistNode1;
        {
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pidentifierlistNode1 = new ASingleIdListIdentifierList(tidNode2);
        }
	nodeList.add(pidentifierlistNode1);
        return nodeList;
    }



    ArrayList new8()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PIdentifierList pidentifierlistNode1;
        {
        TId tidNode2;
        PIdentifierList pidentifierlistNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pidentifierlistNode3 = (PIdentifierList)nodeArrayList3.get(0);

        pidentifierlistNode1 = new AMultiIdListIdentifierList(tidNode2, pidentifierlistNode3);
        }
	nodeList.add(pidentifierlistNode1);
        return nodeList;
    }



    ArrayList new9()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PHeader pheaderNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TId tidNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        {
        }
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
        }

        pheaderNode1 = new AHeader(listNode2, tidNode3, listNode4);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    ArrayList new10()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PHeader pheaderNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TId tidNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        {
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
	if(ptypeNode2 != null)
	{
	  listNode3.add(ptypeNode2);
	}
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        {
        }

        pheaderNode1 = new AHeader(listNode3, tidNode4, listNode5);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    ArrayList new11()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PHeader pheaderNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TId tidNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        {
        }
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
        PParameters pparametersNode4;
        pparametersNode4 = (PParameters)nodeArrayList3.get(0);
	if(pparametersNode4 != null)
	{
	  listNode5.add(pparametersNode4);
	}
        }

        pheaderNode1 = new AHeader(listNode2, tidNode3, listNode5);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    ArrayList new12()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PHeader pheaderNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TId tidNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
	if(ptypeNode2 != null)
	{
	  listNode3.add(ptypeNode2);
	}
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        {
        PParameters pparametersNode5;
        pparametersNode5 = (PParameters)nodeArrayList4.get(0);
	if(pparametersNode5 != null)
	{
	  listNode6.add(pparametersNode5);
	}
        }

        pheaderNode1 = new AHeader(listNode3, tidNode4, listNode6);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    ArrayList new13()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PParameters pparametersNode1;
        {
        PFormal pformalNode2;
        pformalNode2 = (PFormal)nodeArrayList1.get(0);

        pparametersNode1 = new ASingleParameters(pformalNode2);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    ArrayList new14()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PParameters pparametersNode1;
        {
        PFormal pformalNode2;
        PParameters pparametersNode3;
        pformalNode2 = (PFormal)nodeArrayList1.get(0);
        pparametersNode3 = (PParameters)nodeArrayList3.get(0);

        pparametersNode1 = new AMultiParameters(pformalNode2, pparametersNode3);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    ArrayList new15()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFormal pformalNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        PType ptypeNode3;
        PIdentifierList pidentifierlistNode4;
        {
        }
        ptypeNode3 = (PType)nodeArrayList1.get(0);
        pidentifierlistNode4 = (PIdentifierList)nodeArrayList2.get(0);

        pformalNode1 = new AFormalFormal(listNode2, ptypeNode3, pidentifierlistNode4);
        }
	nodeList.add(pformalNode1);
        return nodeList;
    }



    ArrayList new16()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFormal pformalNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        PType ptypeNode4;
        PIdentifierList pidentifierlistNode5;
        {
        TRef trefNode2;
        trefNode2 = (TRef)nodeArrayList1.get(0);
	if(trefNode2 != null)
	{
	  listNode3.add(trefNode2);
	}
        }
        ptypeNode4 = (PType)nodeArrayList2.get(0);
        pidentifierlistNode5 = (PIdentifierList)nodeArrayList3.get(0);

        pformalNode1 = new AFormalFormal(listNode3, ptypeNode4, pidentifierlistNode5);
        }
	nodeList.add(pformalNode1);
        return nodeList;
    }



    ArrayList new17()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PType ptypeNode1;
        {

        ptypeNode1 = new AIntType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    ArrayList new18()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PType ptypeNode1;
        {

        ptypeNode1 = new ABoolType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    ArrayList new19()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PType ptypeNode1;
        {

        ptypeNode1 = new ACharType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    ArrayList new20()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PType ptypeNode1;
        {
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList1.get(0);

        ptypeNode1 = new AArrayTypeType(ptypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    ArrayList new21()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PType ptypeNode1;
        {
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList3.get(0);

        ptypeNode1 = new AListType(ptypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    ArrayList new22()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PSimple psimpleNode2;
        psimpleNode2 = (PSimple)nodeArrayList1.get(0);

        pstatementNode1 = new ASimpleStatement(psimpleNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new23()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {

        pstatementNode1 = new AExitStatement();
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new24()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new25()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode5 = new TypedLinkedList();
        Object nullNode6 = null;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
        }

        pstatementNode1 = new AIfStatement(pexpressionNode2, listNode4, listNode5, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new26()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        Object nullNode7 = null;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstatementNode1 = new AIfStatement(pexpressionNode2, listNode4, listNode6, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new27()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode5 = new TypedLinkedList();
        PStatement pstatementNode6;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
        }
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(pexpressionNode2, listNode4, listNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new28()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        PStatement pstatementNode7;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pstatementNode7 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new AIfStatement(pexpressionNode2, listNode4, listNode6, pstatementNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new29()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PSimpleList psimplelistNode2;
        PExpression pexpressionNode3;
        PSimpleList psimplelistNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        psimplelistNode2 = (PSimpleList)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);
        psimplelistNode4 = (PSimpleList)nodeArrayList6.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList8.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstatementNode1 = new AForStatement(psimplelistNode2, pexpressionNode3, psimplelistNode4, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new30()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementNode1 = new AElseifStatement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new31()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstatementNode1 = new AElseStatement(listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new32()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSimple psimpleNode1;
        {

        psimpleNode1 = new ASkipSimple();
        }
	nodeList.add(psimpleNode1);
        return nodeList;
    }



    ArrayList new33()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSimple psimpleNode1;
        {
        PAtom patomNode2;
        PExpression pexpressionNode3;
        patomNode2 = (PAtom)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        psimpleNode1 = new AAtomassSimple(patomNode2, pexpressionNode3);
        }
	nodeList.add(psimpleNode1);
        return nodeList;
    }



    ArrayList new34()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSimple psimpleNode1;
        {
        PCall pcallNode2;
        pcallNode2 = (PCall)nodeArrayList1.get(0);

        psimpleNode1 = new AScallSimple(pcallNode2);
        }
	nodeList.add(psimpleNode1);
        return nodeList;
    }



    ArrayList new35()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSimpleList psimplelistNode1;
        {
        PSimple psimpleNode2;
        psimpleNode2 = (PSimple)nodeArrayList1.get(0);

        psimplelistNode1 = new ASingleSimpleSimpleList(psimpleNode2);
        }
	nodeList.add(psimplelistNode1);
        return nodeList;
    }



    ArrayList new36()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSimpleList psimplelistNode1;
        {
        PSimple psimpleNode2;
        PSimpleList psimplelistNode3;
        psimpleNode2 = (PSimple)nodeArrayList1.get(0);
        psimplelistNode3 = (PSimpleList)nodeArrayList3.get(0);

        psimplelistNode1 = new AMultiSimpleSimpleList(psimpleNode2, psimplelistNode3);
        }
	nodeList.add(psimplelistNode1);
        return nodeList;
    }



    ArrayList new37()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCall pcallNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        }

        pcallNode1 = new ACallCall(tidNode2, listNode3);
        }
	nodeList.add(pcallNode1);
        return nodeList;
    }



    ArrayList new38()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCall pcallNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        PRealParList prealparlistNode3;
        prealparlistNode3 = (PRealParList)nodeArrayList3.get(0);
	if(prealparlistNode3 != null)
	{
	  listNode4.add(prealparlistNode3);
	}
        }

        pcallNode1 = new ACallCall(tidNode2, listNode4);
        }
	nodeList.add(pcallNode1);
        return nodeList;
    }



    ArrayList new39()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PRealParList prealparlistNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        prealparlistNode1 = new ASigleRealParRealParList(pexpressionNode2);
        }
	nodeList.add(prealparlistNode1);
        return nodeList;
    }



    ArrayList new40()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PRealParList prealparlistNode1;
        {
        PExpression pexpressionNode2;
        PRealParList prealparlistNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        prealparlistNode3 = (PRealParList)nodeArrayList3.get(0);

        prealparlistNode1 = new AMultiRealParRealParList(pexpressionNode2, prealparlistNode3);
        }
	nodeList.add(prealparlistNode1);
        return nodeList;
    }



    ArrayList new41()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAtom patomNode1;
        {
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        patomNode1 = new AAtomAtom(tidNode2);
        }
	nodeList.add(patomNode1);
        return nodeList;
    }



    ArrayList new42()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAtom patomNode1;
        {
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        patomNode1 = new AStringLiteralAtom(tstringNode2);
        }
	nodeList.add(patomNode1);
        return nodeList;
    }



    ArrayList new43()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAtom patomNode1;
        {
        PAtom patomNode2;
        PExpression pexpressionNode3;
        patomNode2 = (PAtom)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        patomNode1 = new AIndAccessAtom(patomNode2, pexpressionNode3);
        }
	nodeList.add(patomNode1);
        return nodeList;
    }



    ArrayList new44()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAtom patomNode1;
        {
        PCall pcallNode2;
        pcallNode2 = (PCall)nodeArrayList1.get(0);

        patomNode1 = new AAcallAtom(pcallNode2);
        }
	nodeList.add(patomNode1);
        return nodeList;
    }



    ArrayList new45()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PType ptypeNode2;
        PExpression pexpressionNode3;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);

        pexpressionNode1 = new ANewExpression(ptypeNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new46()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {

        pexpressionNode1 = new ANilExpression();
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new47()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AHeadExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new48()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ATailExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new49()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new50()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AOrExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new51()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new52()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new53()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAndExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new54()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new55()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ANotExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new56()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new57()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AEqExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new58()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ANotEqualExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new59()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ASmallerExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new60()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ABiggerExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new61()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ASmallerEqExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new62()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ABiggerEqExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new63()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ANilqExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new64()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {

        pexpressionNode1 = new ATrueExpression();
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new65()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {

        pexpressionNode1 = new AFalseExpression();
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new66()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new67()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AListExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new68()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new69()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAdditionExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new70()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ASubtractionExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new71()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new72()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMultiplicationExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new73()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ADivisionExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new74()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AModuloExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new75()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new76()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ASignnumberExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new77()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new APrExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new78()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PAtom patomNode2;
        patomNode2 = (PAtom)nodeArrayList1.get(0);

        pexpressionNode1 = new AAtomExpression(patomNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new79()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TConstInt tconstintNode2;
        tconstintNode2 = (TConstInt)nodeArrayList1.get(0);

        pexpressionNode1 = new AConstIntExpression(tconstintNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new80()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TConstChar tconstcharNode2;
        tconstcharNode2 = (TConstChar)nodeArrayList1.get(0);

        pexpressionNode1 = new ACharConstExpression(tconstcharNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new81()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {

        pexpressionNode1 = new APlusExpression();
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new82()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {

        pexpressionNode1 = new AMinusExpression();
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new83()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new84()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PStatement pstatementNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new85()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PFunction pfunctionNode1;
        pfunctionNode1 = (PFunction)nodeArrayList1.get(0);
	if(pfunctionNode1 != null)
	{
	  listNode2.add(pfunctionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new86()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PFunction pfunctionNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pfunctionNode2 = (PFunction)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfunctionNode2 != null)
	{
	  listNode3.add(pfunctionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new87()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new88()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PStatement pstatementNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {6, SHIFT, 1}, },
			{{-1, ERROR, 1}, {3, SHIFT, 4}, {4, SHIFT, 5}, {5, SHIFT, 6}, {16, SHIFT, 7}, {46, SHIFT, 8}, },
			{{-1, ERROR, 2}, {51, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 7}, {36, SHIFT, 11}, },
			{{-1, ERROR, 8}, {34, SHIFT, 12}, },
			{{-1, ERROR, 9}, {40, SHIFT, 13}, },
			{{-1, ERROR, 10}, {36, SHIFT, 14}, {46, SHIFT, 15}, },
			{{-1, ERROR, 11}, {3, SHIFT, 4}, {4, SHIFT, 5}, {5, SHIFT, 6}, {16, SHIFT, 7}, },
			{{-1, ERROR, 12}, {3, SHIFT, 4}, {4, SHIFT, 5}, {5, SHIFT, 6}, {16, SHIFT, 7}, {23, SHIFT, 17}, {35, SHIFT, 18}, },
			{{-1, ERROR, 13}, {2, SHIFT, 22}, {3, SHIFT, 4}, {4, SHIFT, 5}, {5, SHIFT, 6}, {6, SHIFT, 1}, {11, SHIFT, 23}, {13, SHIFT, 24}, {15, SHIFT, 25}, {16, SHIFT, 7}, {24, SHIFT, 26}, {25, SHIFT, 27}, {28, SHIFT, 28}, {46, SHIFT, 29}, },
			{{-1, ERROR, 14}, {37, SHIFT, 40}, },
			{{-1, ERROR, 15}, {34, SHIFT, 41}, },
			{{-1, ERROR, 16}, {36, SHIFT, 14}, {37, SHIFT, 42}, },
			{{-1, ERROR, 17}, {3, SHIFT, 4}, {4, SHIFT, 5}, {5, SHIFT, 6}, {16, SHIFT, 7}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 19}, {35, SHIFT, 44}, },
			{{-1, REDUCE, 13}, {39, SHIFT, 45}, },
			{{-1, ERROR, 21}, {36, SHIFT, 14}, {46, SHIFT, 46}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 24}, {2, SHIFT, 22}, {25, SHIFT, 27}, {46, SHIFT, 29}, },
			{{-1, ERROR, 25}, {2, SHIFT, 22}, {12, SHIFT, 50}, {14, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 55}, {26, SHIFT, 56}, {27, SHIFT, 57}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 26}, {2, SHIFT, 22}, {12, SHIFT, 50}, {14, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 55}, {26, SHIFT, 56}, {27, SHIFT, 57}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 28}, {3, SHIFT, 4}, {4, SHIFT, 5}, {5, SHIFT, 6}, {16, SHIFT, 7}, {46, SHIFT, 8}, },
			{{-1, REDUCE, 41}, {34, SHIFT, 78}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 33}, {36, SHIFT, 14}, {46, SHIFT, 46}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 34}, {36, REDUCE, 44}, {41, REDUCE, 44}, },
			{{-1, ERROR, 37}, {36, SHIFT, 80}, {41, SHIFT, 81}, },
			{{-1, ERROR, 38}, {2, SHIFT, 22}, {10, SHIFT, 82}, {11, SHIFT, 23}, {13, SHIFT, 24}, {15, SHIFT, 25}, {24, SHIFT, 26}, {25, SHIFT, 27}, {46, SHIFT, 29}, },
			{{-1, ERROR, 39}, {2, SHIFT, 22}, {3, SHIFT, 4}, {4, SHIFT, 5}, {5, SHIFT, 6}, {6, SHIFT, 1}, {11, SHIFT, 23}, {13, SHIFT, 24}, {15, SHIFT, 25}, {16, SHIFT, 7}, {24, SHIFT, 26}, {25, SHIFT, 27}, {28, SHIFT, 28}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 41}, {3, SHIFT, 4}, {4, SHIFT, 5}, {5, SHIFT, 6}, {16, SHIFT, 7}, {23, SHIFT, 17}, {35, SHIFT, 86}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 43}, {36, SHIFT, 14}, {46, SHIFT, 46}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 45}, {3, SHIFT, 4}, {4, SHIFT, 5}, {5, SHIFT, 6}, {16, SHIFT, 7}, {23, SHIFT, 17}, },
			{{-1, REDUCE, 7}, {38, SHIFT, 90}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 35}, {38, SHIFT, 91}, },
			{{-1, ERROR, 49}, {39, SHIFT, 92}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 51}, {34, SHIFT, 93}, },
			{{-1, ERROR, 52}, {3, SHIFT, 4}, {4, SHIFT, 5}, {5, SHIFT, 6}, {16, SHIFT, 7}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 54}, {34, SHIFT, 95}, },
			{{-1, ERROR, 55}, {2, SHIFT, 22}, {12, SHIFT, 50}, {20, SHIFT, 54}, {21, SHIFT, 55}, {27, SHIFT, 57}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 56}, {34, SHIFT, 97}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 58}, {2, SHIFT, 22}, {12, SHIFT, 50}, {14, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 55}, {26, SHIFT, 56}, {27, SHIFT, 57}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 78}, {36, SHIFT, 80}, },
			{{-1, ERROR, 65}, {40, SHIFT, 99}, },
			{{-1, REDUCE, 49}, {22, SHIFT, 100}, },
			{{-1, REDUCE, 51}, {7, SHIFT, 101}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 54}, {31, SHIFT, 102}, {32, SHIFT, 103}, {33, SHIFT, 104}, {48, SHIFT, 105}, {49, SHIFT, 106}, {50, SHIFT, 107}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 66}, {30, SHIFT, 108}, {42, SHIFT, 109}, {43, SHIFT, 110}, },
			{{-1, REDUCE, 68}, {17, SHIFT, 111}, {29, SHIFT, 112}, {47, SHIFT, 113}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 75}, {2, SHIFT, 22}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 78}, {2, SHIFT, 22}, {12, SHIFT, 50}, {14, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 55}, {26, SHIFT, 56}, {27, SHIFT, 57}, {34, SHIFT, 58}, {35, SHIFT, 115}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 80}, {2, SHIFT, 22}, {12, SHIFT, 50}, {14, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 55}, {26, SHIFT, 56}, {27, SHIFT, 57}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 81}, {2, SHIFT, 22}, {12, SHIFT, 50}, {14, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 55}, {26, SHIFT, 56}, {27, SHIFT, 57}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 85}, {2, SHIFT, 22}, {10, SHIFT, 120}, {11, SHIFT, 23}, {13, SHIFT, 24}, {15, SHIFT, 25}, {24, SHIFT, 26}, {25, SHIFT, 27}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 87}, {35, SHIFT, 121}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 90}, {46, SHIFT, 46}, },
			{{-1, ERROR, 91}, {2, SHIFT, 22}, {25, SHIFT, 27}, {46, SHIFT, 29}, },
			{{-1, ERROR, 92}, {2, SHIFT, 22}, {12, SHIFT, 50}, {14, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 55}, {26, SHIFT, 56}, {27, SHIFT, 57}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 93}, {2, SHIFT, 22}, {12, SHIFT, 50}, {14, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 55}, {26, SHIFT, 56}, {27, SHIFT, 57}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 94}, {36, SHIFT, 126}, },
			{{-1, ERROR, 95}, {2, SHIFT, 22}, {12, SHIFT, 50}, {14, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 55}, {26, SHIFT, 56}, {27, SHIFT, 57}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 97}, {2, SHIFT, 22}, {12, SHIFT, 50}, {14, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 55}, {26, SHIFT, 56}, {27, SHIFT, 57}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 98}, {35, SHIFT, 129}, },
			{{-1, ERROR, 99}, {2, SHIFT, 22}, {11, SHIFT, 23}, {13, SHIFT, 24}, {15, SHIFT, 25}, {24, SHIFT, 26}, {25, SHIFT, 27}, {46, SHIFT, 29}, },
			{{-1, ERROR, 100}, {2, SHIFT, 22}, {12, SHIFT, 50}, {20, SHIFT, 54}, {21, SHIFT, 55}, {27, SHIFT, 57}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 101}, {2, SHIFT, 22}, {12, SHIFT, 50}, {20, SHIFT, 54}, {21, SHIFT, 55}, {27, SHIFT, 57}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 102}, {2, SHIFT, 22}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 103}, {2, SHIFT, 22}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 104}, {2, SHIFT, 22}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 105}, {2, SHIFT, 22}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 106}, {2, SHIFT, 22}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 107}, {2, SHIFT, 22}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 108}, {2, SHIFT, 22}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 109}, {2, SHIFT, 22}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 110}, {2, SHIFT, 22}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 111}, {2, SHIFT, 22}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 112}, {2, SHIFT, 22}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 113}, {2, SHIFT, 22}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 116}, {35, SHIFT, 145}, },
			{{-1, REDUCE, 39}, {38, SHIFT, 146}, },
			{{-1, ERROR, 118}, {37, SHIFT, 147}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 124}, {39, SHIFT, 148}, },
			{{-1, ERROR, 125}, {35, SHIFT, 149}, },
			{{-1, ERROR, 126}, {2, SHIFT, 22}, {12, SHIFT, 50}, {14, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 55}, {26, SHIFT, 56}, {27, SHIFT, 57}, {34, SHIFT, 58}, {37, SHIFT, 40}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, ERROR, 127}, {35, SHIFT, 151}, },
			{{-1, ERROR, 128}, {35, SHIFT, 152}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 130}, {2, SHIFT, 22}, {8, SHIFT, 153}, {9, SHIFT, 154}, {10, SHIFT, 155}, {11, SHIFT, 23}, {13, SHIFT, 24}, {15, SHIFT, 25}, {24, SHIFT, 26}, {25, SHIFT, 27}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 50}, {7, SHIFT, 101}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 69}, {17, SHIFT, 111}, {29, SHIFT, 112}, {47, SHIFT, 113}, },
			{{-1, REDUCE, 70}, {17, SHIFT, 111}, {29, SHIFT, 112}, {47, SHIFT, 113}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 146}, {2, SHIFT, 22}, {12, SHIFT, 50}, {14, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 55}, {26, SHIFT, 56}, {27, SHIFT, 57}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 148}, {2, SHIFT, 22}, {25, SHIFT, 27}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 150}, {37, SHIFT, 161}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 153}, {40, SHIFT, 162}, },
			{{-1, ERROR, 154}, {2, SHIFT, 22}, {12, SHIFT, 50}, {14, SHIFT, 51}, {18, SHIFT, 52}, {19, SHIFT, 53}, {20, SHIFT, 54}, {21, SHIFT, 55}, {26, SHIFT, 56}, {27, SHIFT, 57}, {34, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, {44, SHIFT, 61}, {45, SHIFT, 62}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 157}, {10, SHIFT, 164}, },
			{{-1, ERROR, 158}, {8, SHIFT, 153}, {9, SHIFT, 154}, {10, SHIFT, 165}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 160}, {40, SHIFT, 168}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 162}, {2, SHIFT, 22}, {11, SHIFT, 23}, {13, SHIFT, 24}, {15, SHIFT, 25}, {24, SHIFT, 26}, {25, SHIFT, 27}, {46, SHIFT, 29}, },
			{{-1, ERROR, 163}, {40, SHIFT, 170}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 167}, {10, SHIFT, 171}, },
			{{-1, ERROR, 168}, {2, SHIFT, 22}, {11, SHIFT, 23}, {13, SHIFT, 24}, {15, SHIFT, 25}, {24, SHIFT, 26}, {25, SHIFT, 27}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 31}, {2, SHIFT, 22}, {11, SHIFT, 23}, {13, SHIFT, 24}, {15, SHIFT, 25}, {24, SHIFT, 26}, {25, SHIFT, 27}, {46, SHIFT, 29}, },
			{{-1, ERROR, 170}, {2, SHIFT, 22}, {11, SHIFT, 23}, {13, SHIFT, 24}, {15, SHIFT, 25}, {24, SHIFT, 26}, {25, SHIFT, 27}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 172}, {2, SHIFT, 22}, {10, SHIFT, 174}, {11, SHIFT, 23}, {13, SHIFT, 24}, {15, SHIFT, 25}, {24, SHIFT, 26}, {25, SHIFT, 27}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 30}, {2, SHIFT, 22}, {11, SHIFT, 23}, {13, SHIFT, 24}, {15, SHIFT, 25}, {24, SHIFT, 26}, {25, SHIFT, 27}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 29}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 30}, {0, 3}, },
			{{-1, 31}, {39, 84}, },
			{{-1, 32}, },
			{{-1, 47}, {33, 79}, {43, 88}, {90, 122}, },
			{{-1, 9}, {28, 77}, },
			{{-1, 19}, {41, 87}, {45, 89}, },
			{{-1, 20}, },
			{{-1, 21}, {1, 10}, {11, 16}, {13, 33}, {17, 43}, {28, 10}, {39, 33}, {52, 94}, },
			{{-1, 34}, {38, 83}, {85, 83}, {130, 83}, {169, 83}, {172, 83}, {173, 83}, },
			{{-1, 156}, {158, 166}, },
			{{-1, 157}, {158, 167}, },
			{{-1, 35}, {24, 48}, {91, 48}, {148, 48}, },
			{{-1, 49}, {91, 123}, {148, 160}, },
			{{-1, 63}, {13, 36}, {24, 36}, {38, 36}, {39, 36}, {85, 36}, {91, 36}, {99, 36}, {130, 36}, {148, 36}, {162, 36}, {168, 36}, {169, 36}, {170, 36}, {172, 36}, {173, 36}, },
			{{-1, 116}, {146, 159}, },
			{{-1, 64}, {13, 37}, {24, 37}, {38, 37}, {39, 37}, {85, 37}, {91, 37}, {99, 37}, {130, 37}, {148, 37}, {162, 37}, {168, 37}, {169, 37}, {170, 37}, {172, 37}, {173, 37}, },
			{{-1, 117}, {25, 65}, {26, 76}, {58, 98}, {80, 118}, {81, 119}, {92, 124}, {93, 125}, {95, 127}, {97, 128}, {126, 150}, {154, 163}, },
			{{-1, 66}, },
			{{-1, 67}, {100, 131}, },
			{{-1, 68}, {55, 96}, {101, 132}, },
			{{-1, 69}, },
			{{-1, 70}, {102, 133}, {103, 134}, {104, 135}, {105, 136}, {106, 137}, {107, 138}, {108, 139}, },
			{{-1, 71}, },
			{{-1, 72}, {109, 140}, {110, 141}, },
			{{-1, 73}, {111, 142}, {112, 143}, {113, 144}, },
			{{-1, 74}, {75, 114}, },
			{{-1, 75}, },
			{{-1, 38}, {39, 85}, {99, 130}, {162, 169}, {168, 172}, {170, 173}, },
			{{-1, 39}, },
			{{-1, 158}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'def'",
			"expecting: 'int', 'bool', 'char', 'list', id",
			"expecting: EOF",
			"expecting: '[', ']', id",
			"expecting: '['",
			"expecting: '('",
			"expecting: colon",
			"expecting: '[', id",
			"expecting: 'int', 'bool', 'char', 'list'",
			"expecting: 'int', 'bool', 'char', 'list', 'ref', ')'",
			"expecting: string, 'int', 'bool', 'char', 'def', 'exit', 'for', 'if', 'list', 'return', 'skip', 'decl', id",
			"expecting: ']'",
			"expecting: '[', ']'",
			"expecting: string, 'int', 'bool', 'char', 'def', 'exit', 'for', 'if', 'list', 'return', 'skip', 'decl', colon, id",
			"expecting: ')'",
			"expecting: ')', ';'",
			"expecting: string, 'and', 'else', 'elsif', 'end', 'exit', 'for', 'if', 'mod', 'or', 'return', 'skip', '/', '#', '<=', '>=', '=', ')', '[', ']', ',', ';', colon, ':=', '+', '-', id, '*', '<>', '<', '>'",
			"expecting: string, 'else', 'elsif', 'end', 'exit', 'for', 'if', 'return', 'skip', id",
			"expecting: string, 'skip', id",
			"expecting: string, 'false', 'head', 'new', 'nil', 'nil?', 'not', 'tail', 'true', '(', '+', '-', const char, const int, id",
			"expecting: string, 'else', 'elsif', 'end', 'exit', 'for', 'if', 'return', 'skip', ',', ';', colon, id",
			"expecting: string, 'and', 'else', 'elsif', 'end', 'exit', 'for', 'if', 'mod', 'or', 'return', 'skip', '/', '#', '<=', '>=', '=', '(', ')', '[', ']', ',', ';', colon, ':=', '+', '-', id, '*', '<>', '<', '>'",
			"expecting: string, 'else', 'elsif', 'end', 'exit', 'for', 'if', 'return', 'skip', '[', ',', ';', colon, ':=', id",
			"expecting: '[', ':='",
			"expecting: string, 'end', 'exit', 'for', 'if', 'return', 'skip', id",
			"expecting: 'int', 'bool', 'char', 'list', 'ref'",
			"expecting: string, 'int', 'bool', 'char', 'def', 'exit', 'for', 'if', 'list', 'return', 'skip', 'decl', ')', ',', ';', id",
			"expecting: ',', ';', colon",
			"expecting: ';'",
			"expecting: string, 'and', 'else', 'elsif', 'end', 'exit', 'for', 'if', 'or', 'return', 'skip', '<=', '>=', '=', ')', ']', ',', ';', colon, id, '<>', '<', '>'",
			"expecting: string, 'else', 'elsif', 'end', 'exit', 'for', 'if', 'return', 'skip', ')', ']', ',', ';', colon, id",
			"expecting: string, 'false', 'nil?', 'not', 'true', '(', '+', '-', const char, const int, id",
			"expecting: string, const char, const int, id",
			"expecting: string, 'and', 'else', 'elsif', 'end', 'exit', 'for', 'if', 'mod', 'or', 'return', 'skip', '/', '#', '<=', '>=', '=', ')', ']', ',', ';', colon, '+', '-', id, '*', '<>', '<', '>'",
			"expecting: string, 'and', 'else', 'elsif', 'end', 'exit', 'for', 'if', 'mod', 'or', 'return', 'skip', '/', '#', '<=', '>=', '=', ')', '[', ']', ',', ';', colon, '+', '-', id, '*', '<>', '<', '>'",
			"expecting: string, 'else', 'elsif', 'end', 'exit', 'for', 'if', 'or', 'return', 'skip', ')', ']', ',', ';', colon, id",
			"expecting: string, 'and', 'else', 'elsif', 'end', 'exit', 'for', 'if', 'or', 'return', 'skip', ')', ']', ',', ';', colon, id",
			"expecting: string, 'and', 'else', 'elsif', 'end', 'exit', 'for', 'if', 'or', 'return', 'skip', '#', '<=', '>=', '=', ')', ']', ',', ';', colon, '+', '-', id, '<>', '<', '>'",
			"expecting: string, 'false', 'head', 'new', 'nil', 'nil?', 'not', 'tail', 'true', '(', ')', '+', '-', const char, const int, id",
			"expecting: string, 'int', 'bool', 'char', 'def', 'exit', 'for', 'if', 'list', 'return', 'skip', 'decl', id, EOF",
			"expecting: id",
			"expecting: string, 'exit', 'for', 'if', 'return', 'skip', id",
			"expecting: string, '(', '+', '-', const char, const int, id",
			"expecting: ')', ','",
			"expecting: string, 'int', 'bool', 'char', 'def', 'exit', 'for', 'if', 'list', 'return', 'skip', 'decl', ')', ';', id",
			"expecting: ';', colon",
			"expecting: string, 'false', 'head', 'new', 'nil', 'nil?', 'not', 'tail', 'true', '(', ']', '+', '-', const char, const int, id",
			"expecting: 'else', 'elsif', 'end'",
			"expecting: 'end'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 5, 12, 8, 13, 14, 15, 7, 16, 17, 18, 19, 19, 20, 1, 21, 10, 10, 10, 7, 17, 17, 22, 23, 24, 10, 3, 9, 3, 7, 13, 25, 26, 15, 27, 28, 29, 5, 8, 30, 5, 31, 5, 29, 19, 32, 32, 33, 33, 34, 34, 6, 35, 36, 36, 29, 29, 37, 33, 33, 33, 32, 17, 10, 38, 10, 19, 19, 39, 17, 10, 24, 13, 14, 15, 14, 40, 18, 19, 19, 4, 19, 36, 19, 14, 41, 31, 31, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 33, 16, 14, 43, 11, 20, 39, 13, 44, 45, 28, 14, 46, 14, 14, 33, 17, 36, 36, 29, 29, 29, 29, 29, 29, 29, 33, 33, 33, 33, 33, 16, 19, 16, 18, 30, 11, 29, 30, 6, 19, 17, 47, 48, 47, 14, 6, 30, 41, 6, 17, 17, 47, 48, 41, 24, 41, 17, 24, 17, 17, 
        };*/
}
