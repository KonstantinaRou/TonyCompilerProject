//Κοτρώνης Δημήτριος(Dimitrios Kotronis)	3120077
//Πάσχος Γεώργιος(Georgios Paschos) 		3120146
//Ρουσιά Κωνσταντίνα(Rousia Konstantina)	3120159
//Τσιντιρής Νικόλαος(Nikolaos Tsintiris)	3120194

Package tony;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	tab = 9;
	sign= '+' | '-';
	quote = 39;
	double_quote =34;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]];
	underscore = '_';
	engquest = '?';
	star='*';
	n='\n';
	t='\t';
	z='\0';
	r='\r';
	b='\\';
	q='\' ''';
	d_q='\"';
	backstar = quote tab;
	hex_digit = [digit + [['a' .. 'f'] + ['A' .. 'F']]];
	ascii_char='\x' hex_digit? hex_digit;
	col = 58;
	esc_char=(n|t|z|r|b|q|d_q);
	not_eol_with_out_dq=[not_eol - double_quote];
	
States
	normal,comment;	
	
Tokens
	allch='<*'all*'*>';
	string = '"'(not_eol_with_out_dq|d_q)* '"';
	int = 'int';
	bool = 'bool';
	char = 'char';
	def = 'def';
	and = 'and';
	else = 'else';
	elsif = 'elsif';
	end = 'end';
	exit = 'exit';
	false = 'false';
	for = 'for';
	head = 'head';
	if = 'if';
	list = 'list';
	mod = 'mod';
	new = 'new';
	nil = 'nil';
	nil_question_mark = 'nil?';
	not = 'not';
	or = 'or';
	ref = 'ref';
	return = 'return';
	skip = 'skip';
	tail = 'tail';
	true = 'true';
	decl = 'decl';
	mul = '*';
	div= '/';
	sharp='#';
	smaller_equal='<=';
	bigger_equal='>=';
	equal='=';
	not_equal='<>';
	smaller='<';
	bigger='>';
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	comma=',';
	semicolon=';';
	colon = col;
	assign=':=';
	blank = (' ' | eol |tab);
	line_comment = '%' not_eol* eol; 
	plus = '+';
	minus='-';
	const_char = quote (letter | digit | esc_char | ascii_char) quote;
	const_int= digit+;
	id = letter (letter | digit | underscore | engquest)*;

Ignored Tokens
	blank,allch ,line_comment;

Productions

	program = function_definition{-> New program (function_definition.function)};
	
	function_definition {->function} = def header colon function* statement+ end
										{-> New function.function_def(header, [function], [statement])};//$
	
	function = 	{function_def} function_definition {->function_definition.function} |
				{function_decl} decl header  {->New function.function_decl(header)}|
				{var_definition} var_definition{->New function.var_definition (var_definition)};
	
	var_definition = {var_definition} type identifier_list{-> New var_definition(type, identifier_list)};
	
	identifier_list =  {single_id_list} id {->New identifier_list.single_id_list(id)}|
						{multi_id_list} id comma identifier_list{-> New identifier_list.multi_id_list(id, identifier_list)};
						
	
	
	header = {header} type?  id l_par parameters_list? r_par{->New header ([type], id, [parameters_list.parameters])};
	
	parameters_list {-> parameters} = 	{single_parameter} formal {-> New parameters.single(formal)} |
						{multi_parameter} formal semicolon parameters_list {-> New parameters.multi (formal, parameters_list.parameters)};//$
	
	//parameters{->header} = {parameters} formal more_formal_header*{->New header.parameters(formal,more_formal_header.header)};
	
	//more_formal_header{->header} = {more_formal_header} semicolon formal{->New header.more_formal_header(formal)};
	
	formal = {formal} ref? type identifier_list{-> New formal.formal([ref],type, identifier_list)};
	
	type =	{int} int {-> New type.int()}|
			{bool} bool{-> New type.bool()}|
			{char} char{-> New type.char()}|
			{array_type} type l_br r_br{-> New type.array_type(type)}|
			{list} list l_br type r_br{-> New type.list(list,type)};
	
	statement = {simple} simple{->New statement.simple(simple)}|
				{exit}exit{->New statement.exit()}|
				{return} return expression{->New statement.return(expression)}|
				{if} if expression colon statement+ elseif_block* else_block? end{->New statement.if(expression,[statement],[elseif_block.statement],else_block.statement)}|//$
				{for} for for_simplelist expression semicolon simple_list colon statement+ end{->New statement.for(for_simplelist.simple,expression,simple_list.simple,[statement])};//$
				
	for_simplelist{->simple}={simple_list} simple_list semicolon{->simple_list.simple};
	
	elseif_block{->statement} = {elseif_bloc} elsif expression colon statement+{-> New statement.elseif(expression,[statement])};
	
	else_block{->statement} = {else_block} else colon statement+{-> New statement.else([statement])};
	
	simple= {skip}skip {->New simple.skip()}|
			{atomass} atom assign expression{-> New simple.atomass(atom,expression)}|
			{scall} call{->New simple.scall(call)};
						

	simple_list{->simple} = {single_simple} simple {->simple.simple }|//$
					{multi_simple} comma simple_list{->simple_list.simple};
	
	
	call = {call} id l_par real_par_list? r_par{->New call.call(id,real_par_list)};
	
	real_par_list= {sigle_real_par} expression {-> New real_par_list.sigle_real_par(expression)}|
					{multi_real_par} expression comma real_par_list{-> New real_par_list.multi_real_par(expression,real_par_list)};
	
	//real_parl ={real_par} expression more_expression*;
	
	//more_expression = {more_expression} comma expression;
	
	atom =	{atom} id{-> New atom.atom(id)}|
			{string_literal} string {-> New atom.string_literal(string)}|
			{ind_access} atom l_br expression r_br {-> New atom.ind_access(atom, expression)}| 
			{acall}call {->New atom.acall(call)};
		

	expression =	{new} new type l_br expression r_br{->New expression.new(type,expression)}|
					{nil} nil{->New expression.nil()}|
					{head} head l_par expression r_par{->New expression.head(expression)}|
					{tail} tail l_par expression r_par{->New expression.tail(expression)}|
					{orexpr}orexpr{->orexpr.expression};		
					
	orexpr{->expression} =	{or} orexpr or andexpr{->New expression.or(orexpr.expression,andexpr.expression) }|
				{and}andexpr{-> andexpr.expression};		
				
	andexpr{->expression} =	{not} notexpr{->notexpr.expression}|
				{and} andexpr and notexpr{->New expression.and(andexpr.expression,notexpr.expression) };
	
	notexpr{->expression} =	{logexpr} logexpr {-> logexpr.expression}|
				{not} not notexpr{->New expression.not(notexpr.expression)};
	
	logexpr{->expression} =	{list} listexpr{-> listexpr.expression}|
				{eq} logexpr equal listexpr{-> New expression.eq(logexpr.expression,listexpr.expression)}|
				{not_equal} logexpr not_equal listexpr{-> New expression.not_equal(logexpr.expression,listexpr.expression)}|
				{smaller} logexpr smaller listexpr{-> New expression.smaller(logexpr.expression,listexpr.expression)}|
				{bigger} logexpr bigger listexpr{-> New expression.bigger(logexpr.expression,listexpr.expression)}|
				{smaller_eq} logexpr smaller_equal listexpr{-> New expression.smaller_eq(logexpr.expression,listexpr.expression)}|
				{bigger_eq} logexpr bigger_equal listexpr{-> New expression.bigger_eq(logexpr.expression,listexpr.expression)}|
				{nilq} nil_question_mark l_par expression r_par {-> New expression.nilq(expression)}|
				{true} true{->New expression.true()}|
				{false} false{->New expression.false()}
				;
				
	listexpr{->expression} =	{add} addexp{->addexp.expression}|
			{list} addexp sharp listexpr{->New expression.list(addexp.expression,listexpr.expression)}
			;
					
	addexp{->expression} =	{mul} multiplicationexp {->multiplicationexp.expression}|
							{addition} addexp plus multiplicationexp{->New expression.addition(addexp.expression,multiplicationexp.expression)}|
							{subtraction} addexp minus multiplicationexp{->New expression.subtraction(addexp.expression,multiplicationexp.expression)};
	
	multiplicationexp {->expression} = {exp} signnumber{->signnumber.expression}|
						{multiplication} multiplicationexp mul  signnumber{->New expression.multiplication(multiplicationexp.expression,signnumber.expression)}|
						{division} multiplicationexp div signnumber{->New expression.division(multiplicationexp.expression,signnumber.expression)}|	
						{modulo} multiplicationexp mod signnumber{->New expression.modulo(multiplicationexp.expression,signnumber.expression)};	
	
	signnumber{->expression} = 	{var} variable{->variable.expression}|
					{num} sign_char variable{->New expression.signnumber(sign_char.expression,variable.expression)}|
					{pr}l_par expression r_par{->New expression.pr(expression)};
					
	variable{->expression} =	{atom} atom{->New expression.atom(atom)} |
				{int_const}  const_int{->New expression.const_int(const_int)}|
				{char_const} const_char{->New expression.char_const(const_char)}
				;
				
	sign_char{->expression} = {plus} plus {->New expression.plus()}| {minus} minus{->New expression.minus()};
	
	
Abstract Syntax Tree

	program = function;
	
	function = 	{function_def}  header function* statement* |
				{function_decl} header|
				{var_definition} var_definition;
				
	var_definition = type identifier_list;
	
	identifier_list  =  {single_id_list} id |
						{multi_id_list} id identifier_list;
	
	header =  type*  id  parameters*;
	
	parameters = 	{single} formal |
					{multi} formal  parameters ;
					
	formal = {formal} ref* type identifier_list;
	
	type =	{int} |
			{bool}|
			{char} |
			{array_type} type|
			{list} list type;
			
	statement = {simple} simple|
				{exit}|
				{return} expression|
				{if}  expression  [ifstate]:statement* [elseif]:statement* [else]:statement|
				{for} [list]:simple expression  [list2]:simple  statement* |
				{elseif} expression statement*|
				{else} statement*;
				
				
	simple= {skip}|
			{atomass} atom expression|
			{scall} call
				;
				
				
			
				
	call = {call} id real_par_list ;
	
	real_par_list= {sigle_real_par} expression |
					{multi_real_par} expression real_par_list;
					
	atom =	{atom} id|
			{string_literal} string |
			{ind_access} atom  expression | 
			{acall} call ;
		

	expression =	{new} type  expression |
					{nil} |
					{head}   expression |
					{tail}  expression |
					{or}[l]:expression [r]:expression|
					{and} [l]:expression [r]:expression|
					{not} expression|
					{eq} [l]:expression [r]:expression|
					{not_equal} [l]:expression [r]:expression|
					{smaller} [l]:expression [r]:expression|
					{bigger} [l]:expression [r]:expression|
					{smaller_eq} [l]:expression [r]:expression|
					{bigger_eq} [l]:expression [r]:expression|
					{nilq} expression|
					{true}|
					{false}|
					{list} [l]:expression [r]:expression|
					{addition} [l]:expression [r]:expression|
					{subtraction} [l]:expression [r]:expression|
					{multiplication} [l]:expression [r]:expression|
					{division} [l]:expression [r]:expression|
					{modulo} [l]:expression [r]:expression|
					{signnumber} [l]:expression [r]:expression|
					{pr} expression|
					{atom} atom|
					{const_int} const_int|
					{char_const} const_char|
					{plus}|
					{minus};
	
	

				


	